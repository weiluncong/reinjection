// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: origin_data.proto

#include "origin_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace OriginDataTrans {
PROTOBUF_CONSTEXPR OriginCanData::OriginCanData(
    ::_pbi::ConstantInitialized)
  : can_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(0)
  , raw_timestamp_(0)
  , time_stamp_(0)
  , data_len_(0)
  , bus_id_(0){}
struct OriginCanDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginCanDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginCanDataDefaultTypeInternal() {}
  union {
    OriginCanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginCanDataDefaultTypeInternal _OriginCanData_default_instance_;
PROTOBUF_CONSTEXPR OriginUdpData::OriginUdpData(
    ::_pbi::ConstantInitialized)
  : udp_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_stamp_(0)
  , sensor_type_(0){}
struct OriginUdpDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginUdpDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginUdpDataDefaultTypeInternal() {}
  union {
    OriginUdpData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginUdpDataDefaultTypeInternal _OriginUdpData_default_instance_;
}  // namespace OriginDataTrans
static ::_pb::Metadata file_level_metadata_origin_5fdata_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_origin_5fdata_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_origin_5fdata_2eproto = nullptr;

const uint32_t TableStruct_origin_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginCanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginCanData, id_),
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginCanData, raw_timestamp_),
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginCanData, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginCanData, can_data_),
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginCanData, data_len_),
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginCanData, bus_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginUdpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginUdpData, sensor_type_),
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginUdpData, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::OriginDataTrans::OriginUdpData, udp_data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::OriginDataTrans::OriginCanData)},
  { 12, -1, -1, sizeof(::OriginDataTrans::OriginUdpData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::OriginDataTrans::_OriginCanData_default_instance_._instance,
  &::OriginDataTrans::_OriginUdpData_default_instance_._instance,
};

const char descriptor_table_protodef_origin_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021origin_data.proto\022\017OriginDataTrans\"z\n\r"
  "OriginCanData\022\n\n\002id\030\001 \001(\005\022\025\n\rraw_timesta"
  "mp\030\002 \001(\005\022\022\n\ntime_stamp\030\003 \001(\001\022\020\n\010can_data"
  "\030\004 \001(\014\022\020\n\010data_len\030\005 \001(\005\022\016\n\006bus_id\030\006 \001(\005"
  "\"J\n\rOriginUdpData\022\023\n\013sensor_type\030\001 \001(\005\022\022"
  "\n\ntime_stamp\030\002 \001(\001\022\020\n\010udp_data\030\003 \001(\014b\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_origin_5fdata_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_origin_5fdata_2eproto = {
    false, false, 244, descriptor_table_protodef_origin_5fdata_2eproto,
    "origin_data.proto",
    &descriptor_table_origin_5fdata_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_origin_5fdata_2eproto::offsets,
    file_level_metadata_origin_5fdata_2eproto, file_level_enum_descriptors_origin_5fdata_2eproto,
    file_level_service_descriptors_origin_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_origin_5fdata_2eproto_getter() {
  return &descriptor_table_origin_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_origin_5fdata_2eproto(&descriptor_table_origin_5fdata_2eproto);
namespace OriginDataTrans {

// ===================================================================

class OriginCanData::_Internal {
 public:
};

OriginCanData::OriginCanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:OriginDataTrans.OriginCanData)
}
OriginCanData::OriginCanData(const OriginCanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  can_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    can_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_can_data().empty()) {
    can_data_.Set(from._internal_can_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&bus_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(bus_id_));
  // @@protoc_insertion_point(copy_constructor:OriginDataTrans.OriginCanData)
}

inline void OriginCanData::SharedCtor() {
can_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  can_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bus_id_) -
    reinterpret_cast<char*>(&id_)) + sizeof(bus_id_));
}

OriginCanData::~OriginCanData() {
  // @@protoc_insertion_point(destructor:OriginDataTrans.OriginCanData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OriginCanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  can_data_.Destroy();
}

void OriginCanData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OriginCanData::Clear() {
// @@protoc_insertion_point(message_clear_start:OriginDataTrans.OriginCanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  can_data_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bus_id_) -
      reinterpret_cast<char*>(&id_)) + sizeof(bus_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginCanData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 raw_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          raw_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_stamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes can_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_can_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          data_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bus_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          bus_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginCanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OriginDataTrans.OriginCanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 raw_timestamp = 2;
  if (this->_internal_raw_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_raw_timestamp(), target);
  }

  // double time_stamp = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_stamp = this->_internal_time_stamp();
  uint64_t raw_time_stamp;
  memcpy(&raw_time_stamp, &tmp_time_stamp, sizeof(tmp_time_stamp));
  if (raw_time_stamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_time_stamp(), target);
  }

  // bytes can_data = 4;
  if (!this->_internal_can_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_can_data(), target);
  }

  // int32 data_len = 5;
  if (this->_internal_data_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_data_len(), target);
  }

  // int32 bus_id = 6;
  if (this->_internal_bus_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_bus_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OriginDataTrans.OriginCanData)
  return target;
}

size_t OriginCanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OriginDataTrans.OriginCanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes can_data = 4;
  if (!this->_internal_can_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_can_data());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 raw_timestamp = 2;
  if (this->_internal_raw_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_raw_timestamp());
  }

  // double time_stamp = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_stamp = this->_internal_time_stamp();
  uint64_t raw_time_stamp;
  memcpy(&raw_time_stamp, &tmp_time_stamp, sizeof(tmp_time_stamp));
  if (raw_time_stamp != 0) {
    total_size += 1 + 8;
  }

  // int32 data_len = 5;
  if (this->_internal_data_len() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_len());
  }

  // int32 bus_id = 6;
  if (this->_internal_bus_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bus_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OriginCanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OriginCanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OriginCanData::GetClassData() const { return &_class_data_; }

void OriginCanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OriginCanData *>(to)->MergeFrom(
      static_cast<const OriginCanData &>(from));
}


void OriginCanData::MergeFrom(const OriginCanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OriginDataTrans.OriginCanData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_can_data().empty()) {
    _internal_set_can_data(from._internal_can_data());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_raw_timestamp() != 0) {
    _internal_set_raw_timestamp(from._internal_raw_timestamp());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_stamp = from._internal_time_stamp();
  uint64_t raw_time_stamp;
  memcpy(&raw_time_stamp, &tmp_time_stamp, sizeof(tmp_time_stamp));
  if (raw_time_stamp != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from._internal_data_len() != 0) {
    _internal_set_data_len(from._internal_data_len());
  }
  if (from._internal_bus_id() != 0) {
    _internal_set_bus_id(from._internal_bus_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OriginCanData::CopyFrom(const OriginCanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OriginDataTrans.OriginCanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginCanData::IsInitialized() const {
  return true;
}

void OriginCanData::InternalSwap(OriginCanData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &can_data_, lhs_arena,
      &other->can_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginCanData, bus_id_)
      + sizeof(OriginCanData::bus_id_)
      - PROTOBUF_FIELD_OFFSET(OriginCanData, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginCanData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_origin_5fdata_2eproto_getter, &descriptor_table_origin_5fdata_2eproto_once,
      file_level_metadata_origin_5fdata_2eproto[0]);
}

// ===================================================================

class OriginUdpData::_Internal {
 public:
};

OriginUdpData::OriginUdpData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:OriginDataTrans.OriginUdpData)
}
OriginUdpData::OriginUdpData(const OriginUdpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  udp_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    udp_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_udp_data().empty()) {
    udp_data_.Set(from._internal_udp_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&time_stamp_, &from.time_stamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_type_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(sensor_type_));
  // @@protoc_insertion_point(copy_constructor:OriginDataTrans.OriginUdpData)
}

inline void OriginUdpData::SharedCtor() {
udp_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  udp_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_stamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sensor_type_) -
    reinterpret_cast<char*>(&time_stamp_)) + sizeof(sensor_type_));
}

OriginUdpData::~OriginUdpData() {
  // @@protoc_insertion_point(destructor:OriginDataTrans.OriginUdpData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OriginUdpData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  udp_data_.Destroy();
}

void OriginUdpData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OriginUdpData::Clear() {
// @@protoc_insertion_point(message_clear_start:OriginDataTrans.OriginUdpData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  udp_data_.ClearToEmpty();
  ::memset(&time_stamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_type_) -
      reinterpret_cast<char*>(&time_stamp_)) + sizeof(sensor_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OriginUdpData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sensor_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sensor_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double time_stamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bytes udp_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_udp_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginUdpData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:OriginDataTrans.OriginUdpData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sensor_type = 1;
  if (this->_internal_sensor_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_sensor_type(), target);
  }

  // double time_stamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_stamp = this->_internal_time_stamp();
  uint64_t raw_time_stamp;
  memcpy(&raw_time_stamp, &tmp_time_stamp, sizeof(tmp_time_stamp));
  if (raw_time_stamp != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_time_stamp(), target);
  }

  // bytes udp_data = 3;
  if (!this->_internal_udp_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_udp_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OriginDataTrans.OriginUdpData)
  return target;
}

size_t OriginUdpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OriginDataTrans.OriginUdpData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes udp_data = 3;
  if (!this->_internal_udp_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_udp_data());
  }

  // double time_stamp = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_stamp = this->_internal_time_stamp();
  uint64_t raw_time_stamp;
  memcpy(&raw_time_stamp, &tmp_time_stamp, sizeof(tmp_time_stamp));
  if (raw_time_stamp != 0) {
    total_size += 1 + 8;
  }

  // int32 sensor_type = 1;
  if (this->_internal_sensor_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sensor_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OriginUdpData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OriginUdpData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OriginUdpData::GetClassData() const { return &_class_data_; }

void OriginUdpData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OriginUdpData *>(to)->MergeFrom(
      static_cast<const OriginUdpData &>(from));
}


void OriginUdpData::MergeFrom(const OriginUdpData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OriginDataTrans.OriginUdpData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_udp_data().empty()) {
    _internal_set_udp_data(from._internal_udp_data());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_time_stamp = from._internal_time_stamp();
  uint64_t raw_time_stamp;
  memcpy(&raw_time_stamp, &tmp_time_stamp, sizeof(tmp_time_stamp));
  if (raw_time_stamp != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from._internal_sensor_type() != 0) {
    _internal_set_sensor_type(from._internal_sensor_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OriginUdpData::CopyFrom(const OriginUdpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OriginDataTrans.OriginUdpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginUdpData::IsInitialized() const {
  return true;
}

void OriginUdpData::InternalSwap(OriginUdpData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &udp_data_, lhs_arena,
      &other->udp_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginUdpData, sensor_type_)
      + sizeof(OriginUdpData::sensor_type_)
      - PROTOBUF_FIELD_OFFSET(OriginUdpData, time_stamp_)>(
          reinterpret_cast<char*>(&time_stamp_),
          reinterpret_cast<char*>(&other->time_stamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OriginUdpData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_origin_5fdata_2eproto_getter, &descriptor_table_origin_5fdata_2eproto_once,
      file_level_metadata_origin_5fdata_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace OriginDataTrans
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::OriginDataTrans::OriginCanData*
Arena::CreateMaybeMessage< ::OriginDataTrans::OriginCanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OriginDataTrans::OriginCanData >(arena);
}
template<> PROTOBUF_NOINLINE ::OriginDataTrans::OriginUdpData*
Arena::CreateMaybeMessage< ::OriginDataTrans::OriginUdpData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::OriginDataTrans::OriginUdpData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
